// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  votedFor       Waifu @relation(name: "votesFor", fields: [votedForId], references: [id])
  votedForId     Int
  votedAgainst   Waifu @relation(name: "votesAgainst", fields: [votedAgainstId], references: [id])
  votedAgainstId Int

  @@index([votedForId])
  @@index([votedAgainstId])
}

model Waifu {
  // ID is the MAL ID
  id         Int     @id // @default(cuid())
  // URL is the MAL URL
  url        String
  name       String
  name_kanji String?
  image      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  VoteFor     Vote[] @relation("votesFor")
  VoteAgainst Vote[] @relation("votesAgainst")

  @@index([name], name: "waifus_name_index")
}

// * Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "accounts_user_id_index")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "sessions_user_id_index")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // * Custom Fields Here
  // role  String @default("USER")
  role Role @default(USER)

  @@index([name], name: "users_name_index")
  @@fulltext([name])
  @@fulltext([name, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
